<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>JakeTheSnake: Snake Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Snake Class Reference</h1><!-- doxytag: class="Snake" --><!-- doxytag: inherits="Sprite" -->The class handling our player sprite, Jake the <a class="el" href="classSnake.html" title="The class handling our player sprite, Jake the Snake.">Snake</a>.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Snake_8h-source.html">Snake.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for Snake:</div>
<div class="dynsection">

<p><center><img src="classSnake.png" usemap="#Snake_map" border="0" alt=""></center>
<map name="Snake_map">
<area href="classSprite.html" alt="Sprite" shape="rect" coords="0,0,47,24">
</map>
</div>

<p>
<a href="classSnake-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#a9cbcdb4b25d84cbf83509039cac8d01">Snake</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#941fbaad96ee33ca3a7c30c28ca44ef8">~Snake</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#ca6c64ace9a93f74d24b57eb571d36cc">set_jake_parts</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets how long the snake should be .  <a href="#ca6c64ace9a93f74d24b57eb571d36cc"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#12b428f71010d2254cd47faf148fcc43">init</a> (int <a class="el" href="classSnake.html#752c21c147cacab8297f55dd37cd4517">m_player</a>)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Initalizes the snake.  <a href="#12b428f71010d2254cd47faf148fcc43"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#d7d88d5414366d2626e0903e94434182">draw</a> (SDL_Surface *screen)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Applies menu image to a SDL surface.  <a href="#d7d88d5414366d2626e0903e94434182"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#388b55e6766d57a07fd20eb7a86cae07">move</a> (const int current_direction)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Redraws the snake and moves him one step.  <a href="#388b55e6766d57a07fd20eb7a86cae07"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#38848740d2fb24321ccf12ac8001b6a7">get_direction</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the direction snake is having.  <a href="#38848740d2fb24321ccf12ac8001b6a7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#f24192d22ec7498eff0b930511490b19">get_length</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the length of the snake.  <a href="#f24192d22ec7498eff0b930511490b19"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#f60dec039b3213d135a2bd98fbb0e8e4">add_parts</a> (const int &amp;n)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Adds parts to our snake.  <a href="#f60dec039b3213d135a2bd98fbb0e8e4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#b0557bc0c0b8bf1ac74bf62df3acdcd7">remove_parts</a> (const int &amp;n)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Removes parts from our snake.  <a href="#b0557bc0c0b8bf1ac74bf62df3acdcd7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#f9f3e96364bc78157033ef20e8771f3c">set_rainbow</a> (bool flag)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Whenever pacman has collided with us we get rainbow powers.  <a href="#f9f3e96364bc78157033ef20e8771f3c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#6b17b7aefd915ebe026a202a7ead07ac">get_rainbow</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns the value of rainbow.  <a href="#6b17b7aefd915ebe026a202a7ead07ac"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Public Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake_Part</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#898c95be2a4ff79267f034d12512ee8f">snake_body</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This vector contains all 16x16 parts of our snake and corresponding x,y coordinates and whether the part is a head.  <a href="#898c95be2a4ff79267f034d12512ee8f"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#1349ccf7f145382b601ac41927f84af4">direction</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The direction the snake should move in.  <a href="#1349ccf7f145382b601ac41927f84af4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#46ad8eb63fa81c14ea94e2f5d171ee01">instance</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Keeps track of whether its player1 or player2.  <a href="#46ad8eb63fa81c14ea94e2f5d171ee01"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#ba2f9d9cbf10b4be4887e5bc9612bfde">length</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The length of the snake.  <a href="#ba2f9d9cbf10b4be4887e5bc9612bfde"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#918ffb4f325b1a1c3fd383ef69d46338">body_parts</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Amount of body parts (not length).  <a href="#918ffb4f325b1a1c3fd383ef69d46338"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#499b0a75c35ed8cf1c1d24b62f661725">head</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines whether a body part is a head.  <a href="#499b0a75c35ed8cf1c1d24b62f661725"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">SDL_Surface *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#0f7e4b1d5831e0a06037dc9d4fc9b214">snake_surface</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">The surface which we apply the snake to.  <a href="#0f7e4b1d5831e0a06037dc9d4fc9b214"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#752c21c147cacab8297f55dd37cd4517">m_player</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Member variable which holds the player numebr.  <a href="#752c21c147cacab8297f55dd37cd4517"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSnake.html#76f17b3a6f9bc8d0b0e203a102c732d0">rainbow</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Whenever pacman has collided with us we get rainbow powers.  <a href="#76f17b3a6f9bc8d0b0e203a102c732d0"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
The class handling our player sprite, Jake the <a class="el" href="classSnake.html" title="The class handling our player sprite, Jake the Snake.">Snake</a>. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="a9cbcdb4b25d84cbf83509039cac8d01"></a><!-- doxytag: member="Snake::Snake" ref="a9cbcdb4b25d84cbf83509039cac8d01" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Snake::Snake           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="941fbaad96ee33ca3a7c30c28ca44ef8"></a><!-- doxytag: member="Snake::~Snake" ref="941fbaad96ee33ca3a7c30c28ca44ef8" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Snake::~Snake           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="f60dec039b3213d135a2bd98fbb0e8e4"></a><!-- doxytag: member="Snake::add_parts" ref="f60dec039b3213d135a2bd98fbb0e8e4" args="(const int &amp;n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Snake::add_parts           </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>n</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Adds parts to our snake. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>takes number of parts to be added. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="d7d88d5414366d2626e0903e94434182"></a><!-- doxytag: member="Snake::draw" ref="d7d88d5414366d2626e0903e94434182" args="(SDL_Surface *screen)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Snake::draw           </td>
          <td>(</td>
          <td class="paramtype">SDL_Surface *&nbsp;</td>
          <td class="paramname"> <em>screen</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Applies menu image to a SDL surface. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>surface</em>&nbsp;</td><td>takes a SDL surface, like *screen </td></tr>
  </table>
</dl>

<p>Implements <a class="el" href="classSprite.html#60017c520a424c822ebd1c06453fbd68">Sprite</a>.</p>

</div>
</div><p>
<a class="anchor" name="38848740d2fb24321ccf12ac8001b6a7"></a><!-- doxytag: member="Snake::get_direction" ref="38848740d2fb24321ccf12ac8001b6a7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Snake::get_direction           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the direction snake is having. 
<p>

</div>
</div><p>
<a class="anchor" name="f24192d22ec7498eff0b930511490b19"></a><!-- doxytag: member="Snake::get_length" ref="f24192d22ec7498eff0b930511490b19" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Snake::get_length           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the length of the snake. 
<p>

</div>
</div><p>
<a class="anchor" name="6b17b7aefd915ebe026a202a7ead07ac"></a><!-- doxytag: member="Snake::get_rainbow" ref="6b17b7aefd915ebe026a202a7ead07ac" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Snake::get_rainbow           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns the value of rainbow. 
<p>

</div>
</div><p>
<a class="anchor" name="12b428f71010d2254cd47faf148fcc43"></a><!-- doxytag: member="Snake::init" ref="12b428f71010d2254cd47faf148fcc43" args="(int m_player)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Snake::init           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>m_player</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Initalizes the snake. 
<p>

</div>
</div><p>
<a class="anchor" name="388b55e6766d57a07fd20eb7a86cae07"></a><!-- doxytag: member="Snake::move" ref="388b55e6766d57a07fd20eb7a86cae07" args="(const int current_direction)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Snake::move           </td>
          <td>(</td>
          <td class="paramtype">const int&nbsp;</td>
          <td class="paramname"> <em>current_direction</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Redraws the snake and moves him one step. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>current_direction</em>&nbsp;</td><td>takes a direction the snake should be moved, 1 for UP, 2 for LEFT, 3 for DOWN, 4 for RIGHT. </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="classSprite.html#358a1e0705619fa0c90105d8d89e7911">Sprite</a>.</p>

</div>
</div><p>
<a class="anchor" name="b0557bc0c0b8bf1ac74bf62df3acdcd7"></a><!-- doxytag: member="Snake::remove_parts" ref="b0557bc0c0b8bf1ac74bf62df3acdcd7" args="(const int &amp;n)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Snake::remove_parts           </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&nbsp;</td>
          <td class="paramname"> <em>n</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Removes parts from our snake. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>n</em>&nbsp;</td><td>takes number of parts to be added. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="ca6c64ace9a93f74d24b57eb571d36cc"></a><!-- doxytag: member="Snake::set_jake_parts" ref="ca6c64ace9a93f74d24b57eb571d36cc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Snake::set_jake_parts           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets how long the snake should be . 
<p>

</div>
</div><p>
<a class="anchor" name="f9f3e96364bc78157033ef20e8771f3c"></a><!-- doxytag: member="Snake::set_rainbow" ref="f9f3e96364bc78157033ef20e8771f3c" args="(bool flag)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Snake::set_rainbow           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>flag</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Whenever pacman has collided with us we get rainbow powers. 
<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="918ffb4f325b1a1c3fd383ef69d46338"></a><!-- doxytag: member="Snake::body_parts" ref="918ffb4f325b1a1c3fd383ef69d46338" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSnake.html#918ffb4f325b1a1c3fd383ef69d46338">Snake::body_parts</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Amount of body parts (not length). 
<p>

</div>
</div><p>
<a class="anchor" name="1349ccf7f145382b601ac41927f84af4"></a><!-- doxytag: member="Snake::direction" ref="1349ccf7f145382b601ac41927f84af4" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSnake.html#1349ccf7f145382b601ac41927f84af4">Snake::direction</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The direction the snake should move in. 
<p>

</div>
</div><p>
<a class="anchor" name="499b0a75c35ed8cf1c1d24b62f661725"></a><!-- doxytag: member="Snake::head" ref="499b0a75c35ed8cf1c1d24b62f661725" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classSnake.html#499b0a75c35ed8cf1c1d24b62f661725">Snake::head</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines whether a body part is a head. 
<p>

</div>
</div><p>
<a class="anchor" name="46ad8eb63fa81c14ea94e2f5d171ee01"></a><!-- doxytag: member="Snake::instance" ref="46ad8eb63fa81c14ea94e2f5d171ee01" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSnake.html#46ad8eb63fa81c14ea94e2f5d171ee01">Snake::instance</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Keeps track of whether its player1 or player2. 
<p>

</div>
</div><p>
<a class="anchor" name="ba2f9d9cbf10b4be4887e5bc9612bfde"></a><!-- doxytag: member="Snake::length" ref="ba2f9d9cbf10b4be4887e5bc9612bfde" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSnake.html#ba2f9d9cbf10b4be4887e5bc9612bfde">Snake::length</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The length of the snake. 
<p>

</div>
</div><p>
<a class="anchor" name="752c21c147cacab8297f55dd37cd4517"></a><!-- doxytag: member="Snake::m_player" ref="752c21c147cacab8297f55dd37cd4517" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSnake.html#752c21c147cacab8297f55dd37cd4517">Snake::m_player</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Member variable which holds the player numebr. 
<p>

</div>
</div><p>
<a class="anchor" name="76f17b3a6f9bc8d0b0e203a102c732d0"></a><!-- doxytag: member="Snake::rainbow" ref="76f17b3a6f9bc8d0b0e203a102c732d0" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classSnake.html#76f17b3a6f9bc8d0b0e203a102c732d0">Snake::rainbow</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Whenever pacman has collided with us we get rainbow powers. 
<p>

</div>
</div><p>
<a class="anchor" name="898c95be2a4ff79267f034d12512ee8f"></a><!-- doxytag: member="Snake::snake_body" ref="898c95be2a4ff79267f034d12512ee8f" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="structSprite_1_1Snake__Part.html">Snake_Part</a>&gt; <a class="el" href="classSnake.html#898c95be2a4ff79267f034d12512ee8f">Snake::snake_body</a>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This vector contains all 16x16 parts of our snake and corresponding x,y coordinates and whether the part is a head. 
<p>

</div>
</div><p>
<a class="anchor" name="0f7e4b1d5831e0a06037dc9d4fc9b214"></a><!-- doxytag: member="Snake::snake_surface" ref="0f7e4b1d5831e0a06037dc9d4fc9b214" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SDL_Surface* <a class="el" href="classSnake.html#0f7e4b1d5831e0a06037dc9d4fc9b214">Snake::snake_surface</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
The surface which we apply the snake to. 
<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Snake_8h-source.html">Snake.h</a><li><a class="el" href="Snake_8cpp.html">Snake.cpp</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Mon Dec 15 22:49:25 2008 for JakeTheSnake by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.7.1 </small></address>
</body>
</html>
