<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>JakeTheSnake: Single_State Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Single_State Class Reference</h1><!-- doxytag: class="Single_State" --><!-- doxytag: inherits="Abstract_State" -->Handles all kind of events and interactions during single player mode.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Single__State_8h-source.html">Single_State.h</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for Single_State:</div>
<div class="dynsection">

<p><center><img src="classSingle__State.png" usemap="#Single_State_map" border="0" alt=""></center>
<map name="Single_State_map">
<area href="classAbstract__State.html" alt="Abstract_State" shape="rect" coords="0,0,94,24">
</map>
</div>

<p>
<a href="classSingle__State-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#e76984dde9ad126c28f566e31aaf6e8e">key_pressed</a> (SDLKey key)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Handles key presses from the user in the menu.  <a href="#e76984dde9ad126c28f566e31aaf6e8e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#f826470fa8ec5029e326cf5fe6701a45">clock_tick</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">In this function we describe what we'll happen each tick.  <a href="#f826470fa8ec5029e326cf5fe6701a45"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#61b85a57e90d3ce47a5627c0c67c5528">Single_State</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#4343b66defbd463028d740f8d7cd025a">~Single_State</a> ()</td></tr>

<tr><td colspan="2"><br><h2>Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#96ba8f57691cb71a58c03a6310bf16b4">draw</a> (SDL_Surface *surface)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Applies menu image to a SDL surface.  <a href="#96ba8f57691cb71a58c03a6310bf16b4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#dd7868be28a870eb776f20a8921ac41c">check_collisions</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function interacts with our collision handler and handles all events when the snake(s) collides with another object.  <a href="#dd7868be28a870eb776f20a8921ac41c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#2c4c20fca23a60d900e355f402fe52f8">high_score</a> (int score)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">This function writes to filesystem whenever the player collides or dies, and gets a score. And then presents the player with the highscore screen, showing the top 5 results.  <a href="#2c4c20fca23a60d900e355f402fe52f8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#f433c44c69987cd2ca44658d02b00516">is_free</a> (int x, int y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Returns true if theres a free position to spawn at.  <a href="#f433c44c69987cd2ca44658d02b00516"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#33d2a06431c41b2659cefcc2304f89b8">is_free_ghost</a> (int x, int y)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Checks for a free position for the ghost to spawn at.  <a href="#33d2a06431c41b2659cefcc2304f89b8"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#b99464932fa41b0a7c142d3e7cb187d5">move_carrot</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Handles movement of carrot in every tick.  <a href="#b99464932fa41b0a7c142d3e7cb187d5"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#eebf33cca2e325c71154dc3657ab452f">move_apple</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Handles movement of apple in every tick.  <a href="#eebf33cca2e325c71154dc3657ab452f"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#b4283b6699a1f53bd8a3b366a32ceaa6">move_pacman</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Handles movement of pacman in every tick.  <a href="#b4283b6699a1f53bd8a3b366a32ceaa6"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#c77eadf8733aedd6b1f375f75679fa9b">move_ghost</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Handles movement of ghost in every tick.  <a href="#c77eadf8733aedd6b1f375f75679fa9b"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#89af21a65662fd7ab3a32f9a5fb4bbea">sprite_x</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#869d7558cad08aba27e347370368c31e">sprite_y</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classObstacles.html">Obstacles</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#aa286f86e63d6ef638477b6cb2383af1">apple</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classObstacles.html">Obstacles</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#ea458d36186c2a19e8855d701893caa5">carrot</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classObstacles.html">Obstacles</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#f537f381f26d626736331d452ea46d60">pacman</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classObstacles.html">Obstacles</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#c09ee1a5c44f21b9de874424cdbbbfdf">ghost</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classObstacles.html">Obstacles</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#8cd650bdf973c3afd05ab135731ec986">rotten_carrots</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Contains all carrot obstacles that will be spawned throughout game.  <a href="#8cd650bdf973c3afd05ab135731ec986"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">std::vector&lt; <a class="el" href="classObstacles.html">Obstacles</a> &gt;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#3218214d275d6ee34fe63c1663822892">apples</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Contains all apple obstacles that will be spawned throughout game.  <a href="#3218214d275d6ee34fe63c1663822892"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classCollision__Handler.html">Collision_Handler</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#7d412accb662c8bd865db9ae0f762c87">collision_handler</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classSnake.html">Snake</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#0bb9ffb4df0b9987cbb17e1d88d05fa5">player1</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">SDL_Rect&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#af928f926ec693eda29624e69097ab92">green_background</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#79d5214d1df08ab9193ac0c8a1f30b74">p1dir</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#95bb042b67d97c9b6d8d174e97d141c6">p1points</a></td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#199d42704017cbe52a9d3f2c1cf9dadd">finished</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Is used to determine when game has ended.  <a href="#199d42704017cbe52a9d3f2c1cf9dadd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#7135e8e3108c544bf73cdd3d3bb99757">apple_tick</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines how often apple should move.  <a href="#7135e8e3108c544bf73cdd3d3bb99757"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#fd2b9c0582b127a2dbbd4bb438447f3e">carrot_tick</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines how often carrot should move.  <a href="#fd2b9c0582b127a2dbbd4bb438447f3e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#e3bc662d7a7f01440b6c605ad82c0f62">ghost_tick</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines how often ghost should move.  <a href="#e3bc662d7a7f01440b6c605ad82c0f62"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#f78c308cb7fee500b8a1e8c30e728a19">pacman_tick</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Defines how often pacman should move.  <a href="#f78c308cb7fee500b8a1e8c30e728a19"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#f92e345babf14c38a0df13d00f03fa92">p1parts_to_add</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Sets how many parts should be added when a certain event should happen.  <a href="#f92e345babf14c38a0df13d00f03fa92"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classSingle__State.html#7b1fbd7edb6d22308db1e50bbc344770">pacman_is_alive</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Determines whether the pacman power-up has been used or not.  <a href="#7b1fbd7edb6d22308db1e50bbc344770"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Handles all kind of events and interactions during single player mode. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="61b85a57e90d3ce47a5627c0c67c5528"></a><!-- doxytag: member="Single_State::Single_State" ref="61b85a57e90d3ce47a5627c0c67c5528" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Single_State::Single_State           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="4343b66defbd463028d740f8d7cd025a"></a><!-- doxytag: member="Single_State::~Single_State" ref="4343b66defbd463028d740f8d7cd025a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Single_State::~Single_State           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="dd7868be28a870eb776f20a8921ac41c"></a><!-- doxytag: member="Single_State::check_collisions" ref="dd7868be28a870eb776f20a8921ac41c" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::check_collisions           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function interacts with our collision handler and handles all events when the snake(s) collides with another object. 
<p>

</div>
</div><p>
<a class="anchor" name="f826470fa8ec5029e326cf5fe6701a45"></a><!-- doxytag: member="Single_State::clock_tick" ref="f826470fa8ec5029e326cf5fe6701a45" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::clock_tick           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
In this function we describe what we'll happen each tick. 
<p>

<p>Reimplemented from <a class="el" href="classAbstract__State.html#a491ff4876817a567498153be57a3146">Abstract_State</a>.</p>

</div>
</div><p>
<a class="anchor" name="96ba8f57691cb71a58c03a6310bf16b4"></a><!-- doxytag: member="Single_State::draw" ref="96ba8f57691cb71a58c03a6310bf16b4" args="(SDL_Surface *surface)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::draw           </td>
          <td>(</td>
          <td class="paramtype">SDL_Surface *&nbsp;</td>
          <td class="paramname"> <em>surface</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [private, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Applies menu image to a SDL surface. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>surface</em>&nbsp;</td><td>takes a SDL surface, like *screen </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="classAbstract__State.html#2b49c224d269f2df0fece9c41925138d">Abstract_State</a>.</p>

</div>
</div><p>
<a class="anchor" name="2c4c20fca23a60d900e355f402fe52f8"></a><!-- doxytag: member="Single_State::high_score" ref="2c4c20fca23a60d900e355f402fe52f8" args="(int score)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::high_score           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>score</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
This function writes to filesystem whenever the player collides or dies, and gets a score. And then presents the player with the highscore screen, showing the top 5 results. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>score</em>&nbsp;</td><td>Takes the players score to store. </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="f433c44c69987cd2ca44658d02b00516"></a><!-- doxytag: member="Single_State::is_free" ref="f433c44c69987cd2ca44658d02b00516" args="(int x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Single_State::is_free           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Returns true if theres a free position to spawn at. 
<p>

</div>
</div><p>
<a class="anchor" name="33d2a06431c41b2659cefcc2304f89b8"></a><!-- doxytag: member="Single_State::is_free_ghost" ref="33d2a06431c41b2659cefcc2304f89b8" args="(int x, int y)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Single_State::is_free_ghost           </td>
          <td>(</td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&nbsp;</td>
          <td class="paramname"> <em>y</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks for a free position for the ghost to spawn at. 
<p>

</div>
</div><p>
<a class="anchor" name="e76984dde9ad126c28f566e31aaf6e8e"></a><!-- doxytag: member="Single_State::key_pressed" ref="e76984dde9ad126c28f566e31aaf6e8e" args="(SDLKey key)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::key_pressed           </td>
          <td>(</td>
          <td class="paramtype">SDLKey&nbsp;</td>
          <td class="paramname"> <em>key</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Handles key presses from the user in the menu. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>key</em>&nbsp;</td><td>Takes a keypress from the keyboard and performs a action </td></tr>
  </table>
</dl>

<p>Reimplemented from <a class="el" href="classAbstract__State.html#6f97babdfdde1a445ff4937b8a0213ff">Abstract_State</a>.</p>

</div>
</div><p>
<a class="anchor" name="eebf33cca2e325c71154dc3657ab452f"></a><!-- doxytag: member="Single_State::move_apple" ref="eebf33cca2e325c71154dc3657ab452f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::move_apple           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Handles movement of apple in every tick. 
<p>

</div>
</div><p>
<a class="anchor" name="b99464932fa41b0a7c142d3e7cb187d5"></a><!-- doxytag: member="Single_State::move_carrot" ref="b99464932fa41b0a7c142d3e7cb187d5" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::move_carrot           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Handles movement of carrot in every tick. 
<p>

</div>
</div><p>
<a class="anchor" name="c77eadf8733aedd6b1f375f75679fa9b"></a><!-- doxytag: member="Single_State::move_ghost" ref="c77eadf8733aedd6b1f375f75679fa9b" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::move_ghost           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Handles movement of ghost in every tick. 
<p>

</div>
</div><p>
<a class="anchor" name="b4283b6699a1f53bd8a3b366a32ceaa6"></a><!-- doxytag: member="Single_State::move_pacman" ref="b4283b6699a1f53bd8a3b366a32ceaa6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Single_State::move_pacman           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Handles movement of pacman in every tick. 
<p>

</div>
</div><p>
<hr><h2>Member Data Documentation</h2>
<a class="anchor" name="aa286f86e63d6ef638477b6cb2383af1"></a><!-- doxytag: member="Single_State::apple" ref="aa286f86e63d6ef638477b6cb2383af1" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classObstacles.html">Obstacles</a> <a class="el" href="classSingle__State.html#aa286f86e63d6ef638477b6cb2383af1">Single_State::apple</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7135e8e3108c544bf73cdd3d3bb99757"></a><!-- doxytag: member="Single_State::apple_tick" ref="7135e8e3108c544bf73cdd3d3bb99757" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#7135e8e3108c544bf73cdd3d3bb99757">Single_State::apple_tick</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines how often apple should move. 
<p>

</div>
</div><p>
<a class="anchor" name="3218214d275d6ee34fe63c1663822892"></a><!-- doxytag: member="Single_State::apples" ref="3218214d275d6ee34fe63c1663822892" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classObstacles.html">Obstacles</a>&gt; <a class="el" href="classSingle__State.html#3218214d275d6ee34fe63c1663822892">Single_State::apples</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Contains all apple obstacles that will be spawned throughout game. 
<p>

</div>
</div><p>
<a class="anchor" name="ea458d36186c2a19e8855d701893caa5"></a><!-- doxytag: member="Single_State::carrot" ref="ea458d36186c2a19e8855d701893caa5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classObstacles.html">Obstacles</a> <a class="el" href="classSingle__State.html#ea458d36186c2a19e8855d701893caa5">Single_State::carrot</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="fd2b9c0582b127a2dbbd4bb438447f3e"></a><!-- doxytag: member="Single_State::carrot_tick" ref="fd2b9c0582b127a2dbbd4bb438447f3e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#fd2b9c0582b127a2dbbd4bb438447f3e">Single_State::carrot_tick</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines how often carrot should move. 
<p>

</div>
</div><p>
<a class="anchor" name="7d412accb662c8bd865db9ae0f762c87"></a><!-- doxytag: member="Single_State::collision_handler" ref="7d412accb662c8bd865db9ae0f762c87" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classCollision__Handler.html">Collision_Handler</a> <a class="el" href="classSingle__State.html#7d412accb662c8bd865db9ae0f762c87">Single_State::collision_handler</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="199d42704017cbe52a9d3f2c1cf9dadd"></a><!-- doxytag: member="Single_State::finished" ref="199d42704017cbe52a9d3f2c1cf9dadd" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classSingle__State.html#199d42704017cbe52a9d3f2c1cf9dadd">Single_State::finished</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Is used to determine when game has ended. 
<p>

</div>
</div><p>
<a class="anchor" name="c09ee1a5c44f21b9de874424cdbbbfdf"></a><!-- doxytag: member="Single_State::ghost" ref="c09ee1a5c44f21b9de874424cdbbbfdf" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classObstacles.html">Obstacles</a> <a class="el" href="classSingle__State.html#c09ee1a5c44f21b9de874424cdbbbfdf">Single_State::ghost</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="e3bc662d7a7f01440b6c605ad82c0f62"></a><!-- doxytag: member="Single_State::ghost_tick" ref="e3bc662d7a7f01440b6c605ad82c0f62" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#e3bc662d7a7f01440b6c605ad82c0f62">Single_State::ghost_tick</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines how often ghost should move. 
<p>

</div>
</div><p>
<a class="anchor" name="af928f926ec693eda29624e69097ab92"></a><!-- doxytag: member="Single_State::green_background" ref="af928f926ec693eda29624e69097ab92" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">SDL_Rect <a class="el" href="classSingle__State.html#af928f926ec693eda29624e69097ab92">Single_State::green_background</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="79d5214d1df08ab9193ac0c8a1f30b74"></a><!-- doxytag: member="Single_State::p1dir" ref="79d5214d1df08ab9193ac0c8a1f30b74" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#79d5214d1df08ab9193ac0c8a1f30b74">Single_State::p1dir</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f92e345babf14c38a0df13d00f03fa92"></a><!-- doxytag: member="Single_State::p1parts_to_add" ref="f92e345babf14c38a0df13d00f03fa92" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#f92e345babf14c38a0df13d00f03fa92">Single_State::p1parts_to_add</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Sets how many parts should be added when a certain event should happen. 
<p>

</div>
</div><p>
<a class="anchor" name="95bb042b67d97c9b6d8d174e97d141c6"></a><!-- doxytag: member="Single_State::p1points" ref="95bb042b67d97c9b6d8d174e97d141c6" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#95bb042b67d97c9b6d8d174e97d141c6">Single_State::p1points</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="f537f381f26d626736331d452ea46d60"></a><!-- doxytag: member="Single_State::pacman" ref="f537f381f26d626736331d452ea46d60" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classObstacles.html">Obstacles</a> <a class="el" href="classSingle__State.html#f537f381f26d626736331d452ea46d60">Single_State::pacman</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="7b1fbd7edb6d22308db1e50bbc344770"></a><!-- doxytag: member="Single_State::pacman_is_alive" ref="7b1fbd7edb6d22308db1e50bbc344770" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classSingle__State.html#7b1fbd7edb6d22308db1e50bbc344770">Single_State::pacman_is_alive</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Determines whether the pacman power-up has been used or not. 
<p>

</div>
</div><p>
<a class="anchor" name="f78c308cb7fee500b8a1e8c30e728a19"></a><!-- doxytag: member="Single_State::pacman_tick" ref="f78c308cb7fee500b8a1e8c30e728a19" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#f78c308cb7fee500b8a1e8c30e728a19">Single_State::pacman_tick</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Defines how often pacman should move. 
<p>

</div>
</div><p>
<a class="anchor" name="0bb9ffb4df0b9987cbb17e1d88d05fa5"></a><!-- doxytag: member="Single_State::player1" ref="0bb9ffb4df0b9987cbb17e1d88d05fa5" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classSnake.html">Snake</a> <a class="el" href="classSingle__State.html#0bb9ffb4df0b9987cbb17e1d88d05fa5">Single_State::player1</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="8cd650bdf973c3afd05ab135731ec986"></a><!-- doxytag: member="Single_State::rotten_carrots" ref="8cd650bdf973c3afd05ab135731ec986" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::vector&lt;<a class="el" href="classObstacles.html">Obstacles</a>&gt; <a class="el" href="classSingle__State.html#8cd650bdf973c3afd05ab135731ec986">Single_State::rotten_carrots</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Contains all carrot obstacles that will be spawned throughout game. 
<p>

</div>
</div><p>
<a class="anchor" name="89af21a65662fd7ab3a32f9a5fb4bbea"></a><!-- doxytag: member="Single_State::sprite_x" ref="89af21a65662fd7ab3a32f9a5fb4bbea" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#89af21a65662fd7ab3a32f9a5fb4bbea">Single_State::sprite_x</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="869d7558cad08aba27e347370368c31e"></a><!-- doxytag: member="Single_State::sprite_y" ref="869d7558cad08aba27e347370368c31e" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classSingle__State.html#869d7558cad08aba27e347370368c31e">Single_State::sprite_y</a><code> [private]</code>          </td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Single__State_8h-source.html">Single_State.h</a><li><a class="el" href="Single__State_8cpp.html">Single_State.cpp</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Mon Dec 15 22:49:25 2008 for JakeTheSnake by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.7.1 </small></address>
</body>
</html>
