<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>JakeTheSnake: Collision_Handler Class Reference</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.7.1 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="main.html"><span>Main&nbsp;Page</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.html"><span>Class&nbsp;List</span></a></li>
      <li><a href="hierarchy.html"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>Collision_Handler Class Reference</h1><!-- doxytag: class="Collision_Handler" -->This class handles all collisions in the game.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="Collision__Handler_8h-source.html">Collision_Handler.h</a>&gt;</code>
<p>

<p>
<a href="classCollision__Handler-members.html">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCollision__Handler.html#55186acc9ce1f96c7eaa7fb076eef213">Collision_Handler</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCollision__Handler.html#488e5a4b1979ac50d8f34b62f4f1c38f">~Collision_Handler</a> ()</td></tr>

<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCollision__Handler.html#a5a879ed255b7dc45dcc015ba5164d88">is_wall_collision</a> (const <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &amp;snake_head, const SDL_Rect *wall) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Checks if the snake has collided with a wall.  <a href="#a5a879ed255b7dc45dcc015ba5164d88"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCollision__Handler.html#5085dd5e0db771dfb18bcd908481705e">is_obstacles_collision</a> (const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;jake_body, const <a class="el" href="classSprite.html">Sprite</a> &amp;obstacles) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Checks if a obstacle, like an apple has collided with the snake.  <a href="#5085dd5e0db771dfb18bcd908481705e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCollision__Handler.html#cc5df7514c53863cd9710951bfdb0b54">is_self_snake_collision</a> (const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;snake) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Checks whether the snake has collided with any parts of itself.  <a href="#cc5df7514c53863cd9710951bfdb0b54"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classCollision__Handler.html#717c3402e7b47200fbdd2d37f6ef0d09">is_player1_player2_collision</a> (const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;player1, const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;player2) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">In multiplayer mode this function checks if two snakes has collided.  <a href="#717c3402e7b47200fbdd2d37f6ef0d09"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
This class handles all collisions in the game. <hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="55186acc9ce1f96c7eaa7fb076eef213"></a><!-- doxytag: member="Collision_Handler::Collision_Handler" ref="55186acc9ce1f96c7eaa7fb076eef213" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Collision_Handler::Collision_Handler           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<a class="anchor" name="488e5a4b1979ac50d8f34b62f4f1c38f"></a><!-- doxytag: member="Collision_Handler::~Collision_Handler" ref="488e5a4b1979ac50d8f34b62f4f1c38f" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Collision_Handler::~Collision_Handler           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="5085dd5e0db771dfb18bcd908481705e"></a><!-- doxytag: member="Collision_Handler::is_obstacles_collision" ref="5085dd5e0db771dfb18bcd908481705e" args="(const std::vector&lt; Snake::Snake_Part &gt; &amp;jake_body, const Sprite &amp;obstacles) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Collision_Handler::is_obstacles_collision           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>jake_body</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classSprite.html">Sprite</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>obstacles</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks if a obstacle, like an apple has collided with the snake. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>jake_body</em>&nbsp;</td><td>Takes an vector containing snake parts </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>obstacles</em>&nbsp;</td><td>Takes a obstacles <a class="el" href="classSprite.html" title="The abstract superclass, which all our sprites inherit from.">Sprite</a> object </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="717c3402e7b47200fbdd2d37f6ef0d09"></a><!-- doxytag: member="Collision_Handler::is_player1_player2_collision" ref="717c3402e7b47200fbdd2d37f6ef0d09" args="(const std::vector&lt; Snake::Snake_Part &gt; &amp;player1, const std::vector&lt; Snake::Snake_Part &gt; &amp;player2) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Collision_Handler::is_player1_player2_collision           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>player1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>player2</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
In multiplayer mode this function checks if two snakes has collided. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>player1,takes</em>&nbsp;</td><td>a vector of player1's snake parts </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>player2,takes</em>&nbsp;</td><td>a vector of player2's snake parts </td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>1 if player1 lost, 2 if player2 lost and 3 if their heads collided (a draw) </dd></dl>

</div>
</div><p>
<a class="anchor" name="cc5df7514c53863cd9710951bfdb0b54"></a><!-- doxytag: member="Collision_Handler::is_self_snake_collision" ref="cc5df7514c53863cd9710951bfdb0b54" args="(const std::vector&lt; Snake::Snake_Part &gt; &amp;snake) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Collision_Handler::is_self_snake_collision           </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &gt; &amp;&nbsp;</td>
          <td class="paramname"> <em>snake</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks whether the snake has collided with any parts of itself. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>snake</em>&nbsp;</td><td>Takes a vector containing snake parts </td></tr>
  </table>
</dl>

</div>
</div><p>
<a class="anchor" name="a5a879ed255b7dc45dcc015ba5164d88"></a><!-- doxytag: member="Collision_Handler::is_wall_collision" ref="a5a879ed255b7dc45dcc015ba5164d88" args="(const Snake::Snake_Part &amp;snake_head, const SDL_Rect *wall) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Collision_Handler::is_wall_collision           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="structSprite_1_1Snake__Part.html">Snake::Snake_Part</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>snake_head</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const SDL_Rect *&nbsp;</td>
          <td class="paramname"> <em>wall</em></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Checks if the snake has collided with a wall. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>snake_head</em>&nbsp;</td><td>Takes a vector containing all parts of the snake </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>wall</em>&nbsp;</td><td>Takes a whole SDL_Rect object, which is our wall </td></tr>
  </table>
</dl>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Collision__Handler_8h-source.html">Collision_Handler.h</a><li><a class="el" href="Collision__Handler_8cpp.html">Collision_Handler.cpp</a></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Mon Dec 15 22:49:25 2008 for JakeTheSnake by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.7.1 </small></address>
</body>
</html>
